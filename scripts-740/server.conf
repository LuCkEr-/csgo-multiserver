#! /bin/bash

# (C) 2016 Maximilian Wende <maximilian.wende@gmail.com>
#
# This file is licensed under the Apache License 2.0. For more information,
# see the LICENSE file or visit: http://www.apache.org/licenses/LICENSE-2.0




###############################################
#                                             #
#  You should DEFINITELY look into this file  #
#  and configure everything the way you need  #
#                                             #
###############################################




# NOTE: the var=${var-"value"} syntax assigns value to var, only if var is not set yet.
####### This way you can set some of these via the command line, and they will not be overridden by this


#
#  SECTION 1: BASIC SERVER DATA
#
###############################

# Game Server Login Token - Insert here
GSLT=${GSLT-""}

if [[ ! $GSLT ]]; then
	catwarn <<-EOF
			$(bold WARN:)  No Game Server Login Token (GSLT) has been specified! This means that
			       nobody (including yourself) will be able to connect to this server from
			       the internet! Get your GSLT (AppID 730) on

			                  $(bold http://steamcommunity.com/dev/managegameservers)

			       and insert it into your instance's $(bold server.conf).

		EOF
	if ! promptY "Launch this server anyway?"; then	echo; return 1; fi
	echo; fi

# Note that LOCAL_IP and WAN_IP are optional, you should set them though for rented servers
LOCAL_IP=${LOCAL_IP-""}
WAN_IP=${WAN_IP-""}
PORT=${PORT-"27015"}

# IP and Port for this server to be advertised in the server browser
# You should set HOSTIP and HOSTPORT in the case that your game server is behind NAT
HOSTIP=${HOSTIP-"${WAN_IP:-"$LOCAL_IP"}"}
HOSTPORT=${HOSTPORT-"$PORT"}

# Password for clients to connect
PASS=${PASS-"yourpasswordhere"}

# This effectively disables RCON by generating a random password
RCON_PASS=${RCON_PASS-"$(dd status=none if=/dev/urandom bs=24 count=1 | base64)"}

# TICKRATE
TICKRATE=${TICKRATE-"128"}

# Select number of threads to use
THREADS=${THREADS-"2"}


#
# SECTION 2: SELECT THE GAMEMODE
#
################################

# Select the gamemode (Example: competitive, surf). Leave empty to disable
MODE=${MODE-""}

if [[ $MODE ]]; then
	echo "Loading gamemode-specific settings for gamemode $(bold $MODE) ..."
	# Execute the gamemode's specific configuration file
	if ! . "$INSTANCE_DIR/msm.d/modes/$MODE.conf"; then
		caterr <<-EOF
				$(bold ERROR:) The settings for the gamemode $(bold $MODE) could not be loaded!
					   Check the file $(bold "$INSTANCE_DIR/msm.d/modes/$MODE.conf")
					   for errors and try again!

			EOF
		return 1; fi
fi

#############################################
# GAMETYPE # GAMEMODE # Description         #
#==========#==========#=====================#
#     0    #     0    # Classic Casual      #
#     0    #     1    # Classic Competitive #
#----------#----------#---------------------#
#     1    #     0    # Arms Race           #
#     1    #     1    # Demolition          #
#     1    #     2    # Deathmatch          #
#############################################
# There are also other, custom gamemodes

GAMETYPE=${GAMETYPE-"0"}
GAMEMODE=${GAMEMODE-"1"}


#
# SECTION 3: MULTIPLAYER SETTINGS / MAPS
#
########################################

# Slots for players
SLOTS=${SLOTS-"10"}

# Additional slots for server admins
# Note that reserved slots require sourcemod plugins.
ADMIN_SLOTS=${ADMIN_SLOTS-"2"}


#
# TODO: allow entering workshop IDs and automatically generate the respective arguments
#

# Mapgroup - if you use a vanilla server
MAPGROUP=${MAPGROUP-"mg_active"}

# Maps - set the mapcycle, typically used by sourcemod and its plugins (mapcycle generating needs to be enable inorder for this to work)
MAPS=${MAPS-"de_dust2 de_train de_mirage de_cache de_cbble de_overpass de_nuke"}

# convert to array, if necessary
MAPS=( ${MAPS[*]} )

# Map - the map to load when the server starts up.
MAP=${MAP-"de_dust2"}


# Note that MANY gameplay-related settings have to be made in your gamemode_<xyz>_server.cfg instead of here



#
#  SECTION 4: GOTV
#
##################

# If GOTV should automatically record demos of all games (0 or 1)
# Recording is done via a "GOTV Bot", so reserve at least 1 place for him
TV_AUTORECORD=${TV_AUTORECORD-"0"}


# Select the number of clients to serve with this server
#
# It is recommended to keep this low, to not decrease the performance for the players
# The clients should contain:
# - Your caster / cameraman
# - some relays to broadcast everything
# - the GOTV Bot that auto-records the demo
# Recommended, if you wish to use these GOTV features: "5"
# For Relays, this can of course be as high as the server can handle
TV_MAXCLIENTS=${TV_MAXCLIENTS-"$TV_AUTORECORD"}


if (( TV_MAXCLIENTS > 0 )); then

	TV_ENABLE="0"

	# If this is set to 1, people can watch the game via game UI. They will NOT need to type the password
	TV_ADVERTIZE_WATCHABLE=${TV_ADVERTIZE_WATCHABLE-"0"}


	TV_PORT=${TV_PORT-"27020"}
	TV_PASS=${TV_PASS-"yourtvpasswordhere"}
	TV_DELAY=${TV_DELAY-"60"}


	# The default GOTV Tickrate is 16 ...
	#
	# Keep in mind that a higher Snapshotrate increases your demo file size
	# and might stress your server / cause lag
	TV_SNAPSHOTRATE=${TV_SNAPSHOTRATE-"$(( TICKRATE / 2 ))"}


	TV_TITLE=${TV_TITLE-"[GOTV] $HOSTNAME"}


	######## GOTV_RELAY ########

	# By using relay proxies, many spectators can watch your game without reducing the performance of your game server
	# If this server instance should be a GOTV Relay Proxy, specify the host here. Format: "11.22.33.44:27020"
	TV_RELAY=${TV_RELAY-""}
	TV_RELAYPASS=${TV_RELAYPASS-"yourrelaytvpasswordhere"}

	######## GAME CASTING OPTIONS ########

	# If set, the user with the given SteamID (64 Bit) will control the camera for the remaining watchers.
	# The cameraman will HAVE TO start the game with the -interactivecaster command line option.
	# Command: tv_allow_cameraman
	TV_CAMERAMAN=${TV_CAMERAMAN-""}

	# The commentator's SteamID whose voice will be transmitted to the remaining watchers
	# Command: voice_caster_enable
	TV_VOICE_CASTER=${TV_VOICE_CASTER-""}

	#
	# TODO: find out how to display sponsor icons / etc.
	#

	fi

#
#  SECTION 5: Use Local files instead of symlink
#
##################

# motd.txt
MOTD_LOCAL=true

if [ "$MOTD_LOCAL" = true ] ; then
	MOTD_TXT="$INSTANCE_DIR/csgo/motd.txt"
	if [ -L "$MOTD_TXT" ] ; then
		echo "Changed motd.txt to local ..."
		rm "$MOTD_TXT"
		touch "$MOTD_TXT"
	fi
fi

######################## GENERATE CONFIG FILES #########################

######## MAPCYCLE ########

# Enable/Disable auto mapcycle generating
MAPCYCLE_AUTO=false

# Use local mapcycle.txt/maplist.txt
MAPCYCLE_LOCAL=true

MAPCYCLE_TXT="$INSTANCE_DIR/csgo/mapcycle.txt"
if [ "$MAPCYCLE_LOCAL" = true ] ; then
	if [ "$MAPCYCLE_AUTO" = true ] ; then
		caterr <<-EOF
					$(bold ERROR:) Can't use MAPCYCLE_AUTO and MAPCYCLE_LOCAL at the same time!

				EOF
				return 1;
	fi
	
	if [ -L "$MAPCYCLE_TXT" ] ; then
		echo "Changed mapcycle.txt to local ..."
		rm "$MAPCYCLE_TXT"
		touch "$MAPCYCLE_TXT"
	fi
	
	MAPLIST_TXT="$INSTANCE_DIR/csgo/maplist.txt"
	if [ -L "$MAPLIST_TXT" ] ; then
		echo "Changed maplist.txt to local ..."
		rm "$MAPLIST_TXT"
		touch "$MAPLIST_TXT"
	fi
fi

# The map pool (and usually its order as well) when using sourcemod
if [ "$MAPCYCLE_AUTO" = true ] ; then
	if [[ ! $MAPS ]] ; then
		caterr <<-EOF
				$(bold ERROR:) Mapcycle list not specified! Please add maps to "MAPS"

			EOF
			return 1;
	fi
	
	echo "Generating $(bold mapcycle.txt) ..."
	rm "$MAPCYCLE_TXT"
	for map in ${MAPS[@]}; do
		echo "$map" >> "$MAPCYCLE_TXT"
		done
fi

######################## GENERATE COMMAND LINE #########################

# Note: the ${var:+alt_value} prints alt_value, whenever var is set and not empty; nothing otherwise
ARGS=$( cat <<-EOF
			-game csgo -console -usercon -threads $THREADS -tickrate $TICKRATE

			$( # Game Server login token, if set
			 ) ${GSLT:+"+sv_setsteamaccount $GSLT"}

			-port $PORT ${LOCAL_IP:+"-ip $LOCAL_IP"} ${WAN_IP:+"+net_public_adr $WAN_IP"}

			+game_type $GAMETYPE +game_mode $GAMEMODE +mapgroup $MAPGROUP +map $MAP
			-maxplayers $(( SLOTS + ADMIN_SLOTS ))

			$( # GOTV Settings
			 ) ${TV_ENABLE:+"
					+tv_enable 1
					+tv_port "$TV_PORT"
					+tv_delay "$TV_DELAY"
					+tv_snapshotrate "$TV_SNAPSHOTRATE"
					+tv_maxclients "$TV_MAXCLIENTS"
				"}

			$( # GOTV Relay Settings
			 ) ${TV_RELAY:+"
					+tv_relay "$TV_RELAY"
					+tv_relaypassword "$TV_RELAYPASS"
				"}
		EOF
	)

# Remove unnecessary newlines and spaces
ARGS=$(echo $ARGS)


# This file is very much incomplete
