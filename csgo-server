#! /bin/bash

####################### LICENSE AND COPYRIGHT INFORMATION ########################

info () { cat <<EOF
================================================================================

                           CS:GO Multi Server Manager
                           --------------------------

   Launch and set up your Counter-Strike: Global Offensive Dedicated Servers.
   Report bugs, get more information and receive updates to this script at:

                $(printf "\x1b[36;1m%s\x1b[m"               "https://github.com/dasisdormax/csgo-multiserver")

--------------------------------------------------------------------------------

        Copyright (C) 2016 Maximilian Wende <maximilian.wende@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");  you may not use
this  file except in compliance  with the License. You may obtain a  copy of the
License at:
                   $(printf "\x1b[36;1m%s\x1b[m"            "http://www.apache.org/licenses/LICENSE-2.0")

Unless required by applicable law or agreed to in writing,  software distributed
under  the License  is distributed on  an "AS IS"  BASIS,  WITHOUT WARRANTIES OR
CONDITIONS  OF ANY KIND,  either  express or  implied.  See the  License for the
specific language governing permissions and limitations under the License.

================================================================================

EOF
}




############################## USAGE OF THIS SCRIPT ##############################

usage () { cat <<EOF
Usage: $(bold "$THIS_COMM") < commands >

$(printf "\x1b[1;36m%s\x1b[m"              "GENERAL COMMANDS:")
    usage    > Display this help message
    info     > About this script / copyright and license information

$(printf "\x1b[1;36m%s\x1b[m"              "INSTANCE SELECTION:")
    @...     > Select the server instance to apply the following commands on.
             > If no name is given, work on the base installation instead.
    The default instance \$DEFAULT_INSTANCE can be specified in the config file

$(printf "\x1b[1;36m%s\x1b[m"              "INSTANCE-SPECIFIC COMMANDS:")
    create   > Create a new server instance
    start | stop | restart
             > Start/Stop/Restart given server instance (using tmux)
    status   > Check whether the server is currently running
    console  > Attach (connect) to the server's console. While inside, press
             > CTRL-D to detach (return to outside) without killing the server

$(printf "\x1b[1;36m%s\x1b[22m %s\x1b[m"   "ADMINISTRATION COMMANDS:" "(regarding the base installation)")
    admin-install
             > Configure this user as his own admin, install SteamCMD,
             > and optionally download the game
    update   > Install/Update the game server
    validate > Repair broken/missing game files

Commands will be executed in the order they are given. If a command fails,
subsequent commands will not be executed.

EOF
}




########################### BASIC SCRIPT CONFIGURATION ###########################

# APPID, APPNAME: Steam App ID an name of the game to be managed
APPID=740
APPNAME="csgo"

# SERVER_EXEC: The executable file of the server, within INSTANCE_DIR
SERVER_EXEC="srcds_run"

# MSM_CFG: General Configuration file location
# if a relative path is given, it is interpreted as relative to the user's home directory
MSM_CFG="msm.$APPNAME.conf"

# UPDATE_WAITTIME: The time to wait for running servers to stop before performing an update (in seconds)
UPDATE_WAITTIME=120



############################ SERVER CONTROL FUNCTIONS ############################

start () {
	echo "Starting $SERVER_TEXT ..."

	# Check, if instance exists and the user does own it
	if [[ ! -d $INSTANCE_DIR ]]; then caterr <<-EOF
			$(bold ERROR:) Instance directory $(bold "$INSTANCE_DIR") does not exist!
			       Create an instance using '$THIS_COMM @$INSTANCE create-instance'.

			EOF
		return 1; fi

	if [[ ! -w $INSTANCE_DIR ]]; then caterr <<-EOF
			$(bold ERROR:) You do not have full access to $(bold "$INSTANCE_DIR")!
			       Only $(bold $ADMIN) can modify and launch the base installation! Try creating
			       an own instance using '$THIS_COMM @name create-instance' instead.

			EOF
		return 1; fi

	if [[ ! -x $INSTANCE_DIR/$SERVER_EXEC ]]; then caterr <<-EOF
			$(bold ERROR:) Server Executable not found at $(bold "$INSTANCE_DIR/$SERVER_EXEC")!
			       Try repairing the installation using '$THIS_COMM update',
			       '$THIS_COMM repair' or re-create this instance.

			EOF
		return 1; fi

	# Check, if server is already running
	status
	if (( $? < 2 )); then catinfo <<-EOF
			$(bold INFO:)  $SERVER_TEXT is already running!
			       Enter the console using '$THIS_COMM @$INSTANCE console'.

			EOF
		return 0; fi

	# Symlink new files
	if [[ $INSTALL_DIR/msm.d/appid -nt $INSTANCE_DIR/msm.d/appid ]]; then
		echo "Syncing to latest update of base installation ..."
		symlink-all-files
		touch "$INSTANCE_DIR/msm.d/appid"
		fi

	# Load instance configuration
	. $INSTANCE_DIR/msm.d/server.conf
	local errno=$?
	if (( $errno )); then return $errno; fi

	# TODO: Load addon configuration here

	catinfo <<-EOF
			$(bold INFO:)  The launch command is:
			$(bold $SERVER_EXEC) $ARGS
		EOF

	mkdir -p "$INSTANCE_DIR/msm.d/tmp"
	mkdir -p "$INSTANCE_DIR/msm.d/log"

	rm -f "$INSTANCE_DIR/msm.d/tmp/"*

	TIMESTAMP="\$(date +%Y.%m.%d_%T_%z)"
	UNBUFFER="$(which unbuffer)"

	cat > "$INSTANCE_DIR/msm.d/tmp/server-start.sh"   <<-EOF
			#! /bin/bash
			${UNBUFFER:+$UNBUFFER -p} "./$SERVER_EXEC" $ARGS | tee "$INSTANCE_DIR/msm.d/log/$TIMESTAMP-server.log"
			echo $? > "$INSTANCE_DIR/msm.d/tmp/server.exit-code"
		EOF

	cat > "$INSTANCE_DIR/msm.d/tmp/server-control.sh" <<-EOF
			#! /bin/bash
			. "$HOME/$MSM_CFG"
			THIS_DIR="$THIS_DIR"
			INSTANCE_DIR="$INSTANCE_DIR"
			INSTALL_DIR="$INSTALL_DIR"
			TMPDIR="$INSTANCE_DIR/msm.d/tmp"
			LOGFILE="$INSTANCE_DIR/msm.d/log/$TIMESTAMP-controller.log"
			echo "\$LOGFILE" > "\$TMPDIR/server-control.logfile"
			. "\$THIS_DIR/server-control.sh" | tee "\$LOGFILE"
		EOF

	# LAUNCH! (in tmux)

	tmux -f "$THIS_DIR/tmux.conf" -S "$SOCKET" new-session -n "server-control" -s "$APPNAME@$INSTANCE" /bin/bash "$INSTANCE_DIR/msm.d/tmp/server-control.sh" \; detach

	echo
	echo "$SERVER_TEXT started successfully!"
	echo "To enter the game's console, type '$THIS_COMM @$INSTANCE console'."
	echo
	return 0 # success
}

stop () {
	status
	local errno=$?
	if (( errno == 23 )); then return 1; fi
	if (( errno ==  2 )); then echo "$SERVER_TEXT is already STOPPED!"; echo; return 0; fi

	echo "Stopping $SERVER_TEXT ..."

	touch "$INSTANCE_DIR/msm.d/tmp/stop"

	# Give 60 seconds to stop 'softly'
	inotifywait -qq -t 60 -e close_write "$(cat "$INSTANCE_DIR/msm.d/tmp/server-control.logfile")"

	rm "$INSTANCE_DIR/msm.d/tmp/stop"

	# If it hasn't stopped yet, the server will be stopped the hard way now
	delete-tmux

	echo "$SERVER_TEXT is STOPPED!"; echo
}

# Status (Up/Down and extra info) of the selected server instance
#
# Return Codes:
# true/0   running
#      1   launching/updating
#      2   stopped
#     23   access error
status () {
	if [[ ! -w "$INSTANCE_DIR" ]]; then caterr <<-EOF
			$(bold ERROR:) $SERVER_TEXT (directory: $(bold "$INSTANCE_DIR"))
			       does not exist or you do not have the necessary access permissions!

			EOF
		return 23; fi

	# Check if tmux socket exists and is accessible
	if [[ ! -e "$SOCKET" ]]; then return 2; fi
	if [[ ! -w "$SOCKET" ]]; then caterr <<-EOF
			$(bold ERROR:) Tmux socket of $SERVER_TEXT is not accessible!

			EOF
		return 23; fi # 23 = access error

	if ! ( tmux -S "$SOCKET" has-session > /dev/null 2>&1 ); then
		# No session runs within tmux
		delete-tmux
		return 2; fi

	if ! ( tmux -S "$SOCKET" list-windows | grep "$APPNAME-server" > /dev/null ); then
		# Server is not active, most likely due to the server updating or starting up
		return 1; fi

	return 0
}

# Switch to the game console in tmux session
console () {
	status;
	local errno=$?
	if (( $errno > 1 )); then caterr <<-EOF
			$(bold ERROR:) Cannot access the console of $SERVER_TEXT!
			       Check your server's status using '$THIS_COMM @$INSTANCE status'

			EOF
		return 1; fi

	if (( $errno == 1 )); then
		tmux -S "$SOCKET" attach
	else
		tmux -S "$SOCKET" attach -t ":$APPNAME-server"
		fi

	echo
	return 0
}




########################### ADMIN MANAGEMENT FUNCTIONS ###########################

update () {
	local ACTION="update"
	if [[ $1 == "validate" ]]; then local ACTION="validate"; fi
	if [[ $USER != $ADMIN ]]; then
		catwarn <<-EOF
			Only the admin $(bold $ADMIN) can $ACTION the base installation.
			Please switch to the account of $(bold $ADMIN) now! (or CTRL-D to cancel)
			EOF
		sudo -i -u $ADMIN "$THIS_SCRIPT" "$ACTION"
		if (( $? )); then caterr <<-EOF
				$(bold ERROR:) Installation/update as $(bold $ADMIN) failed!

				EOF
			return 1; fi

		return 0; fi

	# First, check if an update is available at all
	local APPMANIFEST="$INSTALL_DIR/steamapps/appmanifest_$APPID.acf"
	if [[ ! $PERFORM_UPDATE && -e $APPMANIFEST && $ACTION == "update" ]]; then
		echo "Checking for updates ..."
		rm ~/Steam/appcache/appinfo.vdf 2>/dev/null # Clear cache
		local buildid=$(
			"$STEAMCMD_DIR/steamcmd.sh" +runscript "$STEAMCMD_DIR/update-check" |
				sed -n '/^"740"$/        ,/^}/       p' |
				sed -n '/^\t\t"branches"/,/^\t\t}/   p' |
				sed -n '/^\t\t\t"public"/,/^\t\t\t}/ p' |
				grep "buildid" | awk '{ print $2 }'
			)

		if (( $? )); then caterr <<-EOF
				$(bold ERROR:) Searching for updates failed!

				EOF
			return 1; fi
		if [[ $(cat "$APPMANIFEST" | grep "buildid" | awk '{ print $2 }' 2>/dev/null) == $buildid ]]; then
			# No update is necessary
			catinfo <<< "$(bold INFO:)  The base installation is already up to date."
			echo
			return 0; fi

		catinfo <<< "$(bold INFO:)  An update for the base installation is available."
		echo
		fi

	# Perform the actual update within a tmux environment, so closing the terminal or
	# an interruption of an SSH session does not interrupt the update
	if ! [[ $TMUX && $PERFORM_UPDATE ]]; then
		echo "Switching into TMUX for performing the update ..."

		TMPDIR="$INSTALL_DIR/msm.d/tmp"
		mkdir -p "$TMPDIR"
		local SOCKET="$TMPDIR/update.tmux-socket"

		if ( tmux -S "$SOCKET" has-session > /dev/null 2>&1 ); then 
			tmux -S "$SOCKET" attach
			echo; return 0; fi

		delete-tmux

		export PERFORM_UPDATE=1
		tmux -S "$SOCKET" -f "$THIS_DIR/tmux.conf" new-session "$THIS_SCRIPT" "$ACTION"
		local errno=$?
		unset PERFORM_UPDATE

		echo; return $errno; fi

	local UPDATE_TIME=$(( $(date +%s) + $UPDATE_WAITTIME ))
	echo $UPDATE_TIME > "$INSTALL_DIR/msm.d/update"
	trap "" SIGINT
	printf "Waiting $UPDATE_WAITTIME seconds for running instances to stop ... "
	while (( $(date +%s) < $UPDATE_TIME )); do sleep 1; done
	trap SIGINT
	echo; echo

	local LOGFILE="$STEAMCMD_DIR/$ACTION.log"
	echo > "$LOGFILE"
	echo "Performing update/installation NOW. Log File: $(bold "$LOGFILE")"
	echo

	tries=5
	try=0
	unset SUCCESS
	until [[ $SUCCESS ]] || (( ++try > tries )); do
		tee -a "$LOGFILE" <<-EOF | catinfo
			####################################################
			# $(printf "[%2d/%2d] %40s" $try $tries "$(date)") #
			# $(printf "%-48s" "Trying to $ACTION the game using SteamCMD ...") #
			####################################################

			EOF
		$(which unbuffer) "$STEAMCMD_DIR/steamcmd.sh" +runscript "$STEAMCMD_DIR/$ACTION" | tee -a "$LOGFILE"
		echo >> "$LOGFILE" # an extra newline in the file because of the weird escape sequences that steam uses
		echo | tee -a "$LOGFILE"

		egrep "Success! App '$APPID'.*(fully installed|up to date)" "$LOGFILE" > /dev/null && local SUCCESS=1

		done

	fix-permissions

	# Update timestamp on appid file, so clients know that files may have changed
	rm "$INSTALL_DIR/msm.d/update" 2>/dev/null
	touch "$INSTALL_DIR/msm.d/appid"

	unset try tries
	if [[ $SUCCESS ]]; then
		catinfo <<< "$(bold INFO:)  Update completed successfully!"
		echo
		return 0
	else catwarn <<-EOF
		$(bold WARN:)  Update failed! For more information, see the log file"
		       at $(bold "$LOGFILE")."

		EOF
		return 1; fi
}




###################### SERVER INSTANCE MANAGEMENT FUNCTIONS ######################

# recursively symlinks all files from the base installation that do not exist yet in the instance
symlink-all-files () {
	# Return if .donotlink file exists in target.
	# This file could be made by instance creation scripts, to indicate that new or missing files should not be linked from the base instance again
	if [[ -e $INSTANCE_DIR/$1.donotlink ]]; then return 0; fi

	# Loop through files in directory
	for file in $(ls -A "$INSTALL_DIR/$1"); do
		# Skip files that are not readable for the current user
		if [[ ! -r $INSTALL_DIR/$1$file ]]; then continue ; fi

		# MSM directory or already symlinked files do not need any more work
		if [[ -L $INSTANCE_DIR/$1$file || $file == msm.d ]]; then continue ; fi

		# recurse through subdirectories
		if [[ -d $INSTANCE_DIR/$1$file ]]; then symlink-all-files "${1}${file}/"; continue ; fi

		# Create symlink for files that do not exist yet in the target directory
		if [[ ! -e $INSTANCE_DIR/$1$file ]]; then 
			ln -s "$INSTALL_DIR/$1$file" "$INSTANCE_DIR/$1$file"
			continue ; fi

		done
}

create-instance () {
	cat <<-EOF
		-------------------------------------------------------------------------------
		               CS:GO Multi-Mode Server Manager - Instance Setup
		-------------------------------------------------------------------------------
		EOF

	if [[ ! $INSTANCE ]]; then catinfo <<-EOF
		$(bold INFO:)  You have selected a base installation, There is no need to create an
		       instance here. If you want to create a new instance, set the instance
		       name using '$THIS_COMM @name create'.

		EOF
		return 0; fi

	check-instance-dir
	local errno=$?
	if (( $errno == 1 )); then
		catwarn <<-EOF
			       This operation $(bold "WILL DELETE ALL DATA") in $(bold "$INSTANCE_DIR") ...

			EOF
		sleep 2
		promptN || { echo; return 1; }
	elif (( $errno )); then
		return 1; fi

	############ INSTANCE CREATION STARTS NOW ############
	rm -rf "$INSTANCE_DIR" > /dev/null 2>&1

	mkdir -p "$INSTANCE_DIR/msm.d"

	# Execute Instance creation script. This will copy all files that the
	# instance owner should be able to modify himself.
	echo
	echo "Copying instance-specific files ..."

	source "$SUBSCRIPT_DIR/instance.sh"

	if (( $? )); then
		caterr <<-EOF
			$(bold ERROR:) An error occured while executing the instance creation script!

			EOF
		rm -rf "$INSTANCE_DIR" > /dev/null 2>&1
		return 1; fi

	echo
	echo "Linking remaining files to the base installation ..."

	echo "$INSTALL_DIR" > "$INSTANCE_DIR/msm.d/install-dir"

	if ! symlink-all-files; then
		caterr <<-EOF
			$(bold ERROR:) Linking this instance to the base installation failed.

			EOF
		rm -rf "$INSTANCE_DIR" > /dev/null 2>&1
		return 1; fi

	echo
	echo "Performing final steps ..."

	cp "$INSTALL_DIR/msm.d/appid" "$INSTANCE_DIR/msm.d/appid"
	cp "$INSTALL_DIR/msm.d/appname" "$INSTANCE_DIR/msm.d/appname"
	cp "$SUBSCRIPT_DIR/server.conf" "$INSTANCE_DIR/msm.d/server.conf"

	# Copy gamemodes and addons from the base installation
	cp -R "$INSTALL_DIR/msm.d/modes" "$INSTANCE_DIR/msm.d/modes"
	cp -R "$INSTALL_DIR/msm.d/addons" "$INSTANCE_DIR/msm.d/addons"

	fix-permissions

	cat <<-EOF

		Instance created successfully in $(bold "$INSTANCE_DIR")!

		EOF
	catinfo <<-EOF
		$(bold INFO:)  You should now edit your instance's configuration, located in
		            $(bold "$INSTANCE_DIR/msm.d/server.conf")
		       in order to set IP, port, passwords and other game settings.

		EOF
}




##################################################################################
############################### PROGRAM STARTS HERE ##############################
##################################################################################

######################### INITIAL CHECKS AND CALCULATIONS ########################

echo # Make some space

# Detect if this has been called via source command
if [[ $0 != ${BASH_SOURCE[0]} ]]; then
	echo "$(bold INFO:)  This script has been invoked using the 'source' builtin."
	echo
	alias exit="unalias exit; return"
	fi

# Check required packages
if [[ ! -x $(which awk)  ]]; then caterr <<< "$(bold ERROR:) 'awk' is not installed, but required for this script!" ; echo; exit 1; fi
if [[ ! -x $(which tmux) ]]; then caterr <<< "$(bold ERROR:) 'tmux' is not installed, but required for this script!"; echo; exit 1; fi
if [[ ! -x $(which wget) ]]; then caterr <<< "$(bold ERROR:) 'wget' is not installed, but required for this script!"; echo; exit 1; fi
if [[ ! -x $(which tar)  ]]; then caterr <<< "$(bold ERROR:) 'tar' is not installed, but required for this script!" ; echo; exit 1; fi

# Get script filename and directory
basename="$(basename "${BASH_SOURCE[0]}")"
dirname="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ $PATH =~ (^|:)$dirname(:|$) ]]; then THIS_COMM="$basename"; else THIS_COMM="${BASH_SOURCE[0]}"; fi
THIS_SCRIPT="$(readlink -f "$dirname/$basename" 2> /dev/null)"
THIS_DIR="$(dirname "$THIS_SCRIPT")"
unset basename dirname

############################### INCLUDE FUNCTIONS ################################

if ! [[ -e "$THIS_DIR/helpers.sh" && -e "$THIS_DIR/setup.sh" ]]; then caterr <<-EOF
	$(bold ERROR:) The helper scripts for this program could not be found.
	       You can get the latest state and all files using
	       'git clone https://github.com/dasisdormax/csgo-multiserver'
	EOF
	exit 1; fi

. "$THIS_DIR/helpers.sh"
. "$THIS_DIR/setup.sh"
CFG=$(cfgfile)

############################## LOOK FOR SUBSCRIPTS ###############################

SUBSCRIPT_DIR="$THIS_DIR/scripts-$APPID"
if [[ ! -d $SUBSCRIPT_DIR ]]; then caterr <<-EOF
	$(bold ERROR:) The subscript directory was not found at
	       $(bold "$SUBSCRIPT_DIR")!

	EOF
	exit 1; fi

if [[ ! -r $SUBSCRIPT_DIR/instance.sh ]]; then caterr <<-EOF
	$(bold ERROR:) Instance creation script was not found at
	       $(bold "$SUBSCRIPT_DIR/instance.sh")!

	EOF
	exit 1; fi

if [[ ! -r $SUBSCRIPT_DIR/permissions.sh ]]; then caterr <<-EOF
	$(bold ERROR:) Permission management script was not found at
	       $(bold "$SUBSCRIPT_DIR/permissions.sh")!

	EOF
	exit 1; fi

if [[ ! -r $SUBSCRIPT_DIR/server.conf ]]; then caterr <<-EOF
		$(bold ERROR:) Default server configuration file was not found at
		       $(bold "$SUBSCRIPT_DIR/server.conf")!

	EOF
	exit 1; fi

############################# LOAD CONFIGURATION FILE ############################

NO_COMMAND=1
readcfg 2> /dev/null && set-instance "$DEFAULT_INSTANCE" || NEED_SETUP=1




##################################################################################
########################### LOOP THROUGH ALL PARAMETERS ##########################
##################################################################################

while [[ $1 ]]; do
	unset NEED_SETUP
	unset NO_COMMAND

	
	case "$1" in ############ BEGIN OUTER CASE ############

		( info | about | license | copyright )
			info
			;;

		( help | --help | usage )
			usage
			;;

		( admin-install )
			admin-install || exit 0
			;;

		( * )
			# Read configuration changes and start setup if needed
			readcfg || { echo; setup; } || exit 1

			# Check other cases, but respect preconditions


			case "$1" in ############ BEGIN INNER CASE ############

				( @* )
					set-instance ${1:1}
					;;

				( start | launch )
					start || exit 1
					;;

				( stop | exit | halt)
					stop || exit 1
					;;

				( restart )
					stop &&	start || exit 1
					;;

				( status )
					status
					errno=$?
					if (( $errno == 0 )); then
						echo "$SERVER_TEXT is RUNNING!"
					elif (( $errno == 1 )); then
						echo "$SERVER_TEXT is currently LAUNCHING or UPDATING!"
					elif (( $errno == 2 )); then
						echo "$SERVER_TEXT is STOPPED!"
					else 
						exit 1; fi

					echo
					;;

				( console )
					console
					;;

				( update | up | install )
					update || exit 1
					;;

				( create | create-instance )
					create-instance || exit 1
					;;

				( validate | repair )
					update validate || exit 1
					;;

				( * )
					caterr <<< "$(bold ERROR:) Unrecognized Option: $(bold "$1")."
					echo       "       Try '$THIS_COMM usage' for a list of available commands."
					echo
					exit 1
					;;

				esac ############ END INNER CASE ############
			;;

		esac ############ END OUTER CASE ############
	

	shift; done ############ END LOOP ############



if [[ $NEED_SETUP ]]; then unset NEED_SETUP NO_COMMAND; setup; exit $?; fi

if [[ $NO_COMMAND ]]; then unset NO_COMMAND; usage; exit 1; fi

exit 0
