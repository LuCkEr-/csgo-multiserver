#! /bin/bash

####################### LICENSE AND COPYRIGHT INFORMATION ########################

about-this-program () { cat <<EOF
================================================================================

                           CS:GO Multi Server Manager
                           --------------------------

   Launch and set up your Counter-Strike: Global Offensive Dedicated Servers.
   Report bugs, get more information and receive updates to this script at:

                $(printf "\x1b[36;1m%s\x1b[m"               "https://github.com/dasisdormax/csgo-multiserver")

--------------------------------------------------------------------------------

        Copyright (C) 2016 Maximilian Wende <maximilian.wende@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");  you may not use
this  file except in compliance  with the License. You may obtain a  copy of the
License at:
                   $(printf "\x1b[36;1m%s\x1b[m"            "http://www.apache.org/licenses/LICENSE-2.0")

Unless required by applicable law or agreed to in writing,  software distributed
under  the License  is distributed on  an "AS IS"  BASIS,  WITHOUT WARRANTIES OR
CONDITIONS  OF ANY KIND,  either  express or  implied.  See the  License for the
specific language governing permissions and limitations under the License.

================================================================================

EOF
}




################################# DEFINITIONS ##################################


# Get script filename and directory
basename="$(basename "${BASH_SOURCE[0]}")"
dirname="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ $PATH =~ (^|:)$dirname(:|$) ]]; 
	then THIS_COMM="$basename"; 
	else THIS_COMM="${BASH_SOURCE[0]}"; fi

THIS_SCRIPT="$(readlink -f "$dirname/$basename" 2> /dev/null)"
THIS_DIR="$(dirname "$THIS_SCRIPT")"
unset basename dirname

USER_DIR="$HOME/msm.d"


# override dot builtin: execute a handler (either a .sh-file or .sh-files in a directory)
# Further parameters are passed to the executed scripts
. () {
	local cmd=${1%%.sh} # Strip .sh extension
	shift               # Makes ${@:2} unnecessary
	# Try executing file or file.sh (depending on extension) otherwise execute sh-files in directory
	if [[ $cmd =~ \.[^/]*$ ]]
		then .file "$cmd" $@ && return
		else .file "$cmd.sh" $@ && return; fi
	.dir "$cmd" $@
}


# Execute all .sh-files inside a given directory
# Further parameters are passed to the executed scripts
#
# Fails and exits if any file is faulty or no files exist in the directory
.dir () {
	[[ -d $1 ]] && {								\
		for file in "$1"/*.sh; do					\
			.file "$file" ${@:2} || return 1; done; \
		}
}


# Execute a file and set the context for the colon function
# Further parameters are passed to the executed scripts
.file () {
	local currentSrcDir="$(dirname $1)"
	[[ -f $1 ]] && builtin . "$1" ${@:2}
}


# override colon builtin: execute a file relative to the current file's base directory
# Further parameters are passed to the executed scripts
: () { . $currentSrcDir/$1 ${@:2}; }




################################### PROGRAM ####################################


# This sets the default parameters such as $APP, if not given through the environment
. "$USER_DIR/defaults.conf" || . "$THIS_DIR/defaults.conf"

# Run the thing
. "$THIS_DIR/program" $@



errno=$?
unset -f . .. :
if [[ $0 != ${BASH_SOURCE[0]} ]]; then return $errno; else exit $errno; fi
